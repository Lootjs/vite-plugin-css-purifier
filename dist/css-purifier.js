import{PurgeCSS as e}from"purgecss";import o from"path";import n from"fs";function t(e,o,n,t){return new(n||(n=Promise))((function(r,s){function c(e){try{l(t.next(e))}catch(e){s(e)}}function u(e){try{l(t.throw(e))}catch(e){s(e)}}function l(e){var o;e.done?r(e.value):(o=e.value,o instanceof n?o:new n((function(e){e(o)}))).then(c,u)}l((t=t.apply(e,o||[])).next())}))}"function"==typeof SuppressedError&&SuppressedError;function r(r){return{name:"css-cleaner",buildStart(){return t(this,void 0,void 0,(function*(){const t=o.resolve(process.cwd(),r.input),s=(e=>e.replace(/\[data-[^=\]]*(="[^"]*")?]/g,""))(n.readFileSync(t,"utf8")),c=[],u=[];if(r.selectors.forEach((e=>{e instanceof RegExp?u.push(e.toString().replaceAll("/","")):c.push(e.slice(1))})),u.length){const e=u.map((e=>`${e}[\\s\\S]*?\\{`)).join("|"),o=new RegExp(e,"g");let n;for(r.shouldPrintSelectors&&console.log("[PureCSS] Regex:",o);null!==(n=o.exec(s));)c.push(n[0].slice(0,-1).trim())}const l=c.map((e=>`${e} {}`)).join(" "),i=yield(new e).purge({content:[{raw:l,extension:"html"}],css:[{raw:s}]});r.shouldPrintOutput&&(console.group("[PureCSS] Content:"),console.log(i[0].css),console.groupEnd()),r.shouldPrintSelectors&&(console.group("[PureCSS] Selectors:"),console.log(r.selectors),console.groupEnd()),n.writeFileSync(o.resolve(process.cwd(),r.output),i[0].css,"utf8")}))}}}export{r as cssPurifier};
